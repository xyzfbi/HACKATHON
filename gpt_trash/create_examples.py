"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
import random

def create_soil_csv():
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—á–≤–µ"""
    random.seed(42)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        "field_id", "pH", "Organic_Matter", "N", "P", "K", 
        "Ca", "Mg", "S", "Fe", "Mn", "Zn", "Cu", "B"
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_lines = [",".join(headers)]
    
    for i in range(1, 101):  # 100 –æ–±—Ä–∞–∑—Ü–æ–≤
        row = [
            str(i),  # field_id
            f"{random.uniform(5.5, 7.5):.2f}",  # pH
            f"{random.uniform(2.0, 5.0):.2f}",  # Organic_Matter
            f"{random.uniform(20, 50):.1f}",  # N
            f"{random.uniform(15, 40):.1f}",  # P
            f"{random.uniform(100, 200):.1f}",  # K
            f"{random.uniform(800, 1200):.1f}",  # Ca
            f"{random.uniform(100, 200):.1f}",  # Mg
            f"{random.uniform(10, 20):.1f}",  # S
            f"{random.uniform(30, 70):.1f}",  # Fe
            f"{random.uniform(20, 40):.1f}",  # Mn
            f"{random.uniform(3, 8):.2f}",  # Zn
            f"{random.uniform(2, 5):.2f}",  # Cu
            f"{random.uniform(0.5, 2.0):.2f}"  # B
        ]
        data_lines.append(",".join(row))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open('example_soil_data.csv', 'w', encoding='utf-8') as f:
        f.write("\n".join(data_lines))
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: example_soil_data.csv")

def create_yield_csv():
    """–°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
    random.seed(42)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["field_id", "yield", "year", "crop"]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_lines = [",".join(headers)]
    
    for i in range(1, 101):  # 100 –∑–∞–ø–∏—Å–µ–π
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –ª–æ–≥–∏–∫–æ–π
        base_yield = random.uniform(25, 50)
        row = [
            str(i),  # field_id
            f"{base_yield:.1f}",  # yield
            "2024",  # year
            "wheat"  # crop
        ]
        data_lines.append(",".join(row))
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open('example_yield_data.csv', 'w', encoding='utf-8') as f:
        f.write("\n".join(data_lines))
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: example_yield_data.csv")

def create_geojson():
    """–°–æ–∑–¥–∞–Ω–∏–µ GeoJSON —Ñ–∞–π–ª–∞ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –ø–æ–ª–µ–π"""
    geojson = {
        "type": "FeatureCollection",
        "features": [
            {
                "type": "Feature",
                "properties": {
                    "field_id": 1,
                    "name": "–ü–æ–ª–µ 1 (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)",
                    "area_ha": 70,
                    "region": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [[
                        [37.6173, 55.7558],
                        [37.6273, 55.7558],
                        [37.6273, 55.7658],
                        [37.6173, 55.7658],
                        [37.6173, 55.7558]
                    ]]
                }
            },
            {
                "type": "Feature",
                "properties": {
                    "field_id": 2,
                    "name": "–ü–æ–ª–µ 2 (–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)",
                    "area_ha": 70,
                    "region": "–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω"
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [[
                        [55.9721, 54.7388],
                        [55.9821, 54.7388],
                        [55.9821, 54.7488],
                        [55.9721, 54.7488],
                        [55.9721, 54.7388]
                    ]]
                }
            },
            {
                "type": "Feature",
                "properties": {
                    "field_id": 3,
                    "name": "–ü–æ–ª–µ 3 (–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å)",
                    "area_ha": 70,
                    "region": "–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [[
                        [46.0086, 51.5406],
                        [46.0186, 51.5406],
                        [46.0186, 51.5506],
                        [46.0086, 51.5506],
                        [46.0086, 51.5406]
                    ]]
                }
            }
        ]
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    with open('example_fields.geojson', 'w', encoding='utf-8') as f:
        json.dump(geojson, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: example_fields.geojson")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print()
    
    create_soil_csv()
    create_yield_csv()
    create_geojson()
    
    print()
    print("üìã –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    print("- example_soil_data.csv - —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—á–≤ (100 –æ–±—Ä–∞–∑—Ü–æ–≤)")
    print("- example_yield_data.csv - –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ (100 –∑–∞–ø–∏—Å–µ–π)")
    print("- example_fields.geojson - –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–µ–π (3 –ø–æ–ª—è)")
    print()
    print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!")
    print("üìÅ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")

if __name__ == "__main__":
    main()
