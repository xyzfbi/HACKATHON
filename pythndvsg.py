"""
–ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
Agricultural Soil Analysis Dashboard
"""

import streamlit as st
import pandas as pd
import numpy as np
import geopandas as gpd
import rasterio
from rasterio.plot import show
import folium
from streamlit_folium import st_folium
import plotly.express as px
import plotly.graph_objects as go
from scipy import stats
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
import json
import warnings
import os
from datetime import datetime
import base64
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏",
    page_icon="üåæ",
    layout="wide"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main {padding: 0rem 1rem;}
    .stTabs [data-baseweb="tab-list"] {gap: 2px;}
    .stTabs [data-baseweb="tab"] {padding: 10px 20px;}
    .metric-container {
        background-color: #f0f2f6;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
if 'soil_data' not in st.session_state:
    st.session_state.soil_data = None
if 'yield_data' not in st.session_state:
    st.session_state.yield_data = None
if 'geo_data' not in st.session_state:
    st.session_state.geo_data = None
if 'model' not in st.session_state:
    st.session_state.model = None

class SoilAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.soil_params = [
            'pH', 'Organic_Matter', 'N', 'P', 'K', 
            'Ca', 'Mg', 'S', 'Fe', 'Mn', 'Zn', 'Cu', 'B'
        ]
        
    def load_geotiff(self, file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ GeoTIFF —Ñ–∞–π–ª–æ–≤"""
        try:
            with rasterio.open(file) as src:
                data = src.read()
                bounds = src.bounds
                crs = src.crs
                transform = src.transform
                return {
                    'data': data,
                    'bounds': bounds,
                    'crs': crs,
                    'transform': transform
                }
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoTIFF: {e}")
            return None
    
    def load_geojson(self, file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON –¥–∞–Ω–Ω—ã—Ö"""
        try:
            geo_data = gpd.read_file(file)
            return geo_data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON: {e}")
            return None
    
    def analyze_correlations(self, soil_df, yield_df):
        """–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—á–≤—ã –∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é"""
        correlations = {}
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        merged_df = pd.merge(soil_df, yield_df, on='field_id', how='inner')
        
        # –†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        for param in self.soil_params:
            if param in merged_df.columns:
                corr, p_value = stats.pearsonr(
                    merged_df[param].dropna(), 
                    merged_df['yield'].dropna()
                )
                correlations[param] = {
                    'correlation': corr,
                    'p_value': p_value,
                    'significant': p_value < 0.05
                }
        
        return correlations, merged_df
    
    def identify_fertility_zones(self, data, threshold_low=0.3, threshold_high=0.7):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è"""
        normalized = (data - data.min()) / (data.max() - data.min())
        
        zones = np.zeros_like(normalized)
        zones[normalized < threshold_low] = 1  # –ù–∏–∑–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å
        zones[(normalized >= threshold_low) & (normalized < threshold_high)] = 2  # –°—Ä–µ–¥–Ω—è—è
        zones[normalized >= threshold_high] = 3  # –í—ã—Å–æ–∫–∞—è
        
        return zones
    
    def build_prediction_model(self, soil_df, yield_df):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        merged_df = pd.merge(soil_df, yield_df, on='field_id', how='inner')
        
        # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_cols = [col for col in self.soil_params if col in merged_df.columns]
        X = merged_df[feature_cols].fillna(merged_df[feature_cols].mean())
        y = merged_df['yield']
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=0.2, random_state=42
        )
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = RandomForestRegressor(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_importance = pd.DataFrame({
            'feature': feature_cols,
            'importance': model.feature_importances_
        }).sort_values('importance', ascending=False)
        
        return model, scaler, feature_importance, feature_cols
    
    def process_satellite_imagery(self, geotiff_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—á–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GeoTIFF
            data = geotiff_data['data']
            if len(data.shape) == 3:
                # –ú–Ω–æ–≥–æ–∫–∞–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                data_2d = np.mean(data, axis=0)
            else:
                data_2d = data[0] if len(data.shape) == 3 else data
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            data_normalized = (data_2d - np.min(data_2d)) / (np.max(data_2d) - np.min(data_2d))
            
            # –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
            valid_pixels = data_normalized[~np.isnan(data_normalized)]
            if len(valid_pixels) > 0:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
                X = valid_pixels.reshape(-1, 1)
                
                # K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
                kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
                clusters = kmeans.fit_predict(X)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
                fertility_map = np.full_like(data_normalized, np.nan)
                valid_mask = ~np.isnan(data_normalized)
                fertility_map[valid_mask] = clusters
            
            return {
                'original_data': data_2d,
                'normalized_data': data_normalized,
                'fertility_zones': fertility_map,
                'bounds': geotiff_data['bounds'],
                'crs': geotiff_data['crs'],
                'transform': geotiff_data['transform']
            }
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤: {e}")
            return None
    
    def analyze_soil_fertility_zones(self, geotiff_data, yield_data):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏"""
        processed_data = self.process_satellite_imagery(geotiff_data)
        if processed_data is None:
            return None
        
        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ —Å –∑–æ–Ω–∞–º–∏ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
        fertility_analysis = {
            'zones': {
                'high': {'count': 0, 'avg_yield': 0, 'pixels': []},
                'medium': {'count': 0, 'avg_yield': 0, 'pixels': []},
                'low': {'count': 0, 'avg_yield': 0, 'pixels': []}
            },
            'processed_data': processed_data
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∑–æ–Ω (0=–Ω–∏–∑–∫–∞—è, 1=—Å—Ä–µ–¥–Ω—è—è, 2=–≤—ã—Å–æ–∫–∞—è –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ)
        for zone_id in [0, 1, 2]:
            zone_mask = processed_data['fertility_zones'] == zone_id
            zone_pixels = np.sum(zone_mask)
            
            if zone_pixels > 0:
                zone_name = ['low', 'medium', 'high'][zone_id]
                fertility_analysis['zones'][zone_name]['count'] = zone_pixels
                fertility_analysis['zones'][zone_name]['pixels'] = zone_mask
        
        return fertility_analysis
    
    def create_russia_map_with_fields(self, fields_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –†–æ—Å—Å–∏–∏ —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—è—Ö"""
        # –¶–µ–Ω—Ç—Ä –†–æ—Å—Å–∏–∏
        russia_center = [64.6863, 97.7453]
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        m = folium.Map(
            location=russia_center,
            zoom_start=4,
            tiles='OpenStreetMap'
        )
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
        zone_colors = {
            'high': 'green',
            'medium': 'orange', 
            'low': 'red'
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É
        for field in fields_data:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–æ –∑–æ–Ω–µ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
            zone = field.get('fertility_zone', 'medium')
            color = zone_colors.get(zone, 'orange')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            folium.CircleMarker(
                location=[field['lat'], field['lon']],
                radius=15,
                popup=f"<b>{field['name']}</b><br>–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {field['yield']:.1f} —Ü/–≥–∞<br>–ó–æ–Ω–∞: {zone}",
                color='black',
                weight=2,
                fillColor=color,
                fillOpacity=0.7
            ).add_to(m)
        
        return m
    
    def get_field_analysis(self, field_id, soil_data, yield_data):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è"""
        field_soil = soil_data[soil_data['field_id'] == field_id]
        field_yield = yield_data[yield_data['field_id'] == field_id]
        
        if field_soil.empty or field_yield.empty:
            return None
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        field_data = pd.merge(field_soil, field_yield, on='field_id')
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        analysis = {
            'field_id': field_id,
            'yield': field_yield['yield'].iloc[0],
            'soil_parameters': {},
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—á–≤—ã
        for param in self.soil_params:
            if param in field_data.columns:
                value = field_data[param].iloc[0]
                analysis['soil_parameters'][param] = {
                    'value': value,
                    'status': self._evaluate_parameter_status(param, value)
                }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        analysis['recommendations'] = self._generate_recommendations(analysis['soil_parameters'])
        
        return analysis
    
    def _evaluate_parameter_status(self, parameter, value):
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ—á–≤—ã"""
        # –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
        norms = {
            'pH': {'optimal': (6.0, 7.5), 'low': 6.0, 'high': 7.5},
            'N': {'optimal': (20, 50), 'low': 20, 'high': 50},
            'P': {'optimal': (15, 40), 'low': 15, 'high': 40},
            'K': {'optimal': (100, 200), 'low': 100, 'high': 200},
            'Organic_Matter': {'optimal': (2, 5), 'low': 2, 'high': 5}
        }
        
        if parameter in norms:
            norm = norms[parameter]
            if norm['low'] <= value <= norm['high']:
                return 'optimal'
            elif value < norm['low']:
                return 'low'
            else:
                return 'high'
        return 'unknown'
    
    def _generate_recommendations(self, soil_parameters):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—á–≤—ã"""
        recommendations = []
        
        for param, data in soil_parameters.items():
            if data['status'] == 'low':
                if param == 'N':
                    recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–Ω–µ—Å–µ–Ω–∏–µ –∞–∑–æ—Ç–Ω—ã—Ö —É–¥–æ–±—Ä–µ–Ω–∏–π")
                elif param == 'P':
                    recommendations.append("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–Ω–µ—Å–µ–Ω–∏–µ —Ñ–æ—Å—Ñ–æ—Ä–Ω—ã—Ö —É–¥–æ–±—Ä–µ–Ω–∏–π")
                elif param == 'K':
                    recommendations.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–µ—Å–µ–Ω–∏–µ –∫–∞–ª–∏–π–Ω—ã—Ö —É–¥–æ–±—Ä–µ–Ω–∏–π")
                elif param == 'pH':
                    recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–≤–µ—Å—Ç–∫–æ–≤–∞–Ω–∏–µ –ø–æ—á–≤—ã")
            elif data['status'] == 'high':
                if param == 'pH':
                    recommendations.append("–ü–æ—á–≤–∞ —Å–ª–∏—à–∫–æ–º —â–µ–ª–æ—á–Ω–∞—è, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–∏—Å–ª–µ–Ω–∏–µ")
                else:
                    recommendations.append(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ {param} –∏–∑–±—ã—Ç–æ—á–Ω–æ, —Å–Ω–∏–∑–∏—Ç—å –Ω–æ—Ä–º—ã –≤–Ω–µ—Å–µ–Ω–∏—è")
        
        return recommendations

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer = SoilAnalyzer()

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üåæ –ê–Ω–∞–ª–∏–∑ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
st.markdown("---")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
with st.sidebar:
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤
    st.subheader("–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ (GeoTIFF)")
    geotiff_files = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã GeoTIFF",
        type=['tif', 'tiff'],
        accept_multiple_files=True,
        key="geotiff"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON
    st.subheader("–ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–µ–π (GeoJSON)")
    geojson_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª GeoJSON",
        type=['geojson', 'json'],
        key="geojson"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—á–≤–µ
    st.subheader("–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ—á–≤")
    soil_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª",
        type=['xlsx', 'xls'],
        key="soil"
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
    st.subheader("–î–∞–Ω–Ω—ã–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
    yield_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é",
        type=['xlsx', 'xls', 'csv'],
        key="yield"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if st.button("üîÑ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        if soil_file and yield_file:
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—á–≤–µ
                st.session_state.soil_data = pd.read_excel(soil_file)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
                if yield_file.name.endswith('.csv'):
                    st.session_state.yield_data = pd.read_csv(yield_file)
                else:
                    st.session_state.yield_data = pd.read_excel(yield_file)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
                if geojson_file:
                    st.session_state.geo_data = analyzer.load_geojson(geojson_file)
                
                st.session_state.data_loaded = True
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            st.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")

# –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
if st.session_state.data_loaded:
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìä –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
        "üó∫Ô∏è –ö–∞—Ä—Ç–∞ –†–§ —Å –ø–æ–ª—è–º–∏",
        "üõ∞Ô∏è –ê–Ω–∞–ª–∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤",
        "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö",
        "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "üìã –û—Ç—á–µ—Ç"
    ])
    
    # –í–∫–ª–∞–¥–∫–∞ 1: –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    with tab1:
        st.header("–ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—á–≤—ã –∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if st.session_state.soil_data is None:
            np.random.seed(42)
            n_samples = 100
            
            st.session_state.soil_data = pd.DataFrame({
                'field_id': range(1, n_samples + 1),
                'pH': np.random.normal(6.5, 0.5, n_samples),
                'Organic_Matter': np.random.normal(3.0, 0.8, n_samples),
                'N': np.random.normal(30, 10, n_samples),
                'P': np.random.normal(25, 8, n_samples),
                'K': np.random.normal(150, 30, n_samples),
                'Ca': np.random.normal(1000, 200, n_samples),
                'Mg': np.random.normal(150, 40, n_samples),
                'S': np.random.normal(15, 5, n_samples),
                'Fe': np.random.normal(50, 15, n_samples),
                'Mn': np.random.normal(30, 10, n_samples),
                'Zn': np.random.normal(5, 2, n_samples),
                'Cu': np.random.normal(3, 1, n_samples),
                'B': np.random.normal(1, 0.3, n_samples)
            })
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—á–≤—ã
            yield_base = (
                st.session_state.soil_data['N'] * 0.5 +
                st.session_state.soil_data['P'] * 0.3 +
                st.session_state.soil_data['K'] * 0.1 +
                st.session_state.soil_data['Organic_Matter'] * 5 +
                np.random.normal(0, 5, n_samples)
            )
            
            st.session_state.yield_data = pd.DataFrame({
                'field_id': range(1, n_samples + 1),
                'yield': yield_base + 20
            })
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        correlations, merged_data = analyzer.analyze_correlations(
            st.session_state.soil_data,
            st.session_state.yield_data
        )
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            corr_df = pd.DataFrame([
                {'–ü–∞—Ä–∞–º–µ—Ç—Ä': k, '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è': v['correlation'], 'p-value': v['p_value']}
                for k, v in correlations.items()
            ])
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            fig = px.bar(
                corr_df,
                x='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
                y='–ü–∞—Ä–∞–º–µ—Ç—Ä',
                orientation='h',
                color='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è',
                color_continuous_scale='RdBu',
                title='–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—á–≤—ã —Å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é'
            )
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ –∑–Ω–∞—á–∏–º—ã–º–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º–∏
            significant_corr = [
                {
                    '–ü–∞—Ä–∞–º–µ—Ç—Ä': k,
                    '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è': f"{v['correlation']:.3f}",
                    'p-value': f"{v['p_value']:.4f}",
                    '–ó–Ω–∞—á–∏–º–æ—Å—Ç—å': '‚úÖ' if v['significant'] else '‚ùå'
                }
                for k, v in correlations.items()
            ]
            
            st.dataframe(
                pd.DataFrame(significant_corr),
                use_container_width=True,
                hide_index=True
            )
            
            # –í—ã–≤–æ–¥—ã
            st.info("""
            **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**
            - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è > 0.7: —Å–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å
            - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.3-0.7: —É–º–µ—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å
            - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è < 0.3: —Å–ª–∞–±–∞—è —Å–≤—è–∑—å
            - p-value < 0.05: —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–∞—è —Å–≤—è–∑—å
            """)
    
    # –í–∫–ª–∞–¥–∫–∞ 2: –ö–∞—Ä—Ç–∞ –†–§ —Å –ø–æ–ª—è–º–∏
    with tab2:
        st.header("–ö–∞—Ä—Ç–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        if st.session_state.soil_data is not None and st.session_state.yield_data is not None:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—è—Ö
            fields_data = []
            for i in range(1, 4):  # 3 –ø–æ–ª—è
                field_soil = st.session_state.soil_data[st.session_state.soil_data['field_id'] == i]
                field_yield = st.session_state.yield_data[st.session_state.yield_data['field_id'] == i]
                
                if not field_soil.empty and not field_yield.empty:
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
                    yield_val = field_yield['yield'].iloc[0]
                    if yield_val > 40:
                        zone = 'high'
                    elif yield_val > 30:
                        zone = 'medium'
                    else:
                        zone = 'low'
                    
                    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –†–§
                    field_coords = [
                        {'name': f'–ü–æ–ª–µ {i} (–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª.)', 'lat': 55.7558 + (i-1)*0.5, 'lon': 37.6173 + (i-1)*0.5},
                        {'name': f'–ü–æ–ª–µ {i} (–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω)', 'lat': 54.7388 + (i-1)*0.3, 'lon': 55.9721 + (i-1)*0.3},
                        {'name': f'–ü–æ–ª–µ {i} (–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª.)', 'lat': 51.5406 + (i-1)*0.2, 'lon': 46.0086 + (i-1)*0.2}
                    ]
                    
                    field_info = {
                        'name': field_coords[i-1]['name'],
                        'lat': field_coords[i-1]['lat'],
                        'lon': field_coords[i-1]['lon'],
                        'yield': yield_val,
                        'fertility_zone': zone,
                        'area': 70,
                        'pH': field_soil['pH'].iloc[0] if 'pH' in field_soil.columns else 'N/A',
                        'N': field_soil['N'].iloc[0] if 'N' in field_soil.columns else 'N/A'
                    }
                    fields_data.append(field_info)
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            if fields_data:
                try:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –†–æ—Å—Å–∏–∏ —Å –ø–æ–ª—è–º–∏
                    m = analyzer.create_russia_map_with_fields(fields_data)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    import tempfile
                    import os
                    
                    with tempfile.NamedTemporaryFile(delete=False, suffix='.html') as tmp_file:
                        m.save(tmp_file.name)
                        
                        # –ß—Ç–µ–Ω–∏–µ HTML —Ñ–∞–π–ª–∞
                        with open(tmp_file.name, 'r', encoding='utf-8') as f:
                            html_content = f.read()
                        
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                        st.components.v1.html(html_content, width=700, height=500)
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        os.unlink(tmp_file.name)
                    
                    # –õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã
                    st.markdown("""
                    **–õ–µ–≥–µ–Ω–¥–∞ –∫–∞—Ä—Ç—ã:**
                    - üü¢ –ó–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞: –í—ã—Å–æ–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (>40 —Ü/–≥–∞)
                    - üü† –û—Ä–∞–Ω–∂–µ–≤–∞—è –∑–æ–Ω–∞: –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (30-40 —Ü/–≥–∞)  
                    - üî¥ –ö—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞: –ù–∏–∑–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (<30 —Ü/–≥–∞)
                    """)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
                    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
                    
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ
                    st.subheader("–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—è—Ö (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                    fields_df = pd.DataFrame([
                        {
                            '–ü–æ–ª–µ': field['name'],
                            '–®–∏—Ä–æ—Ç–∞': field['lat'],
                            '–î–æ–ª–≥–æ—Ç–∞': field['lon'],
                            '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ü/–≥–∞)': field['yield'],
                            '–ó–æ–Ω–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è': field['fertility_zone']
                        }
                        for field in fields_data
                    ])
                    st.dataframe(fields_df, use_container_width=True)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—è—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ")
        
        with col2:
            st.subheader("–§–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
            yield_range = st.slider(
                "–î–∏–∞–ø–∞–∑–æ–Ω —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ (—Ü/–≥–∞)",
                min_value=0,
                max_value=60,
                value=(20, 50),
                step=5
            )
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –∑–æ–Ω–∞–º –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
            selected_zones = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—ã –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è",
                ['high', 'medium', 'low'],
                default=['high', 'medium', 'low'],
                format_func=lambda x: {'high': '–í—ã—Å–æ–∫–∞—è', 'medium': '–°—Ä–µ–¥–Ω—è—è', 'low': '–ù–∏–∑–∫–∞—è'}[x]
            )
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            param_filter = st.selectbox(
                "–ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                ['–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å', 'pH', '–ê–∑–æ—Ç (N)', '–§–æ—Å—Ñ–æ—Ä (P)', '–ö–∞–ª–∏–π (K)', '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ']
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º
            st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º")
            
            if fields_data:
                stats_df = pd.DataFrame([
                    {
                        '–ü–æ–ª–µ': field['name'],
                        '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ü/–≥–∞)': field['yield'],
                        '–ó–æ–Ω–∞': field['fertility_zone'],
                        'pH': field['pH']
                    }
                    for field in fields_data
                ])
                st.dataframe(stats_df, use_container_width=True, hide_index=True)
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
            st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—è")
            selected_field = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                [f"–ü–æ–ª–µ {i}" for i in range(1, len(fields_data)+1)],
                key="field_selector"
            )
            
            if selected_field and st.session_state.soil_data is not None:
                field_id = int(selected_field.split()[1])
                field_analysis = analyzer.get_field_analysis(
                    field_id, 
                    st.session_state.soil_data, 
                    st.session_state.yield_data
                )
                
                if field_analysis:
                    st.write(f"**–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å:** {field_analysis['yield']:.1f} —Ü/–≥–∞")
                    
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—á–≤—ã
                    st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—á–≤—ã:**")
                    for param, data in field_analysis['soil_parameters'].items():
                        status_emoji = {'optimal': '‚úÖ', 'low': '‚ö†Ô∏è', 'high': 'üî¥', 'unknown': '‚ùì'}[data['status']]
                        st.write(f"- {param}: {data['value']:.2f} {status_emoji}")
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    if field_analysis['recommendations']:
                        st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                        for rec in field_analysis['recommendations']:
                            st.write(f"- {rec}")
    
    # –í–∫–ª–∞–¥–∫–∞ 3: –ê–Ω–∞–ª–∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤
    with tab3:
        st.header("–ê–Ω–∞–ª–∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—á–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö GeoTIFF —Ñ–∞–π–ª–æ–≤
        if geotiff_files:
            st.subheader("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
            
            for i, geotiff_file in enumerate(geotiff_files):
                st.write(f"**–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {i+1}: {geotiff_file.name}**")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ GeoTIFF
                geotiff_data = analyzer.load_geotiff(geotiff_file)
                if geotiff_data:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–Ω–∏–º–∫–∞
                    processed_data = analyzer.process_satellite_imagery(geotiff_data)
                    
                    if processed_data:
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.write("**–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
                            st.write(f"- –†–∞–∑–º–µ—Ä: {processed_data['original_data'].shape}")
                            st.write(f"- –î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π: {np.min(processed_data['original_data']):.2f} - {np.max(processed_data['original_data']):.2f}")
                            
                            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            fig = px.imshow(
                                processed_data['original_data'],
                                title=f"–ò—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫ - {geotiff_file.name}",
                                color_continuous_scale='gray'
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        
                        with col2:
                            st.write("**–ó–æ–Ω—ã –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è:**")
                            
                            # –ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
                            fertility_analysis = analyzer.analyze_soil_fertility_zones(geotiff_data, st.session_state.yield_data)
                            
                            if fertility_analysis:
                                zones_df = pd.DataFrame([
                                    {'–ó–æ–Ω–∞': '–í—ã—Å–æ–∫–∞—è', '–ü–∏–∫—Å–µ–ª–∏': fertility_analysis['zones']['high']['count']},
                                    {'–ó–æ–Ω–∞': '–°—Ä–µ–¥–Ω—è—è', '–ü–∏–∫—Å–µ–ª–∏': fertility_analysis['zones']['medium']['count']},
                                    {'–ó–æ–Ω–∞': '–ù–∏–∑–∫–∞—è', '–ü–∏–∫—Å–µ–ª–∏': fertility_analysis['zones']['low']['count']}
                                ])
                                
                                fig = px.pie(
                                    zones_df,
                                    values='–ü–∏–∫—Å–µ–ª–∏',
                                    names='–ó–æ–Ω–∞',
                                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è',
                                    color_discrete_map={
                                        '–í—ã—Å–æ–∫–∞—è': '#2E8B57',
                                        '–°—Ä–µ–¥–Ω—è—è': '#FFD700',
                                        '–ù–∏–∑–∫–∞—è': '#DC143C'
                                    }
                                )
                                st.plotly_chart(fig, use_container_width=True)
                                
                                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
                                fig = px.imshow(
                                    processed_data['fertility_zones'],
                                    title="–ö–∞—Ä—Ç–∞ –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è",
                                    color_continuous_scale=['red', 'yellow', 'green']
                                )
                                st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ GeoTIFF —Ñ–∞–π–ª—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            st.subheader("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—á–≤–µ–Ω–Ω–æ–π —Ä–∞–∑–Ω–æ—Å—Ç–∏")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            np.random.seed(42)
            test_image = np.random.rand(100, 100) * 100
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –∑–æ–Ω –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è
            fertility_zones = np.zeros_like(test_image)
            fertility_zones[test_image < 30] = 0  # –ù–∏–∑–∫–∞—è
            fertility_zones[(test_image >= 30) & (test_image < 70)] = 1  # –°—Ä–µ–¥–Ω—è—è
            fertility_zones[test_image >= 70] = 2  # –í—ã—Å–æ–∫–∞—è
            
            col1, col2 = st.columns(2)
            
            with col1:
                fig = px.imshow(
                    test_image,
                    title="–ò–º–∏—Ç–∞—Ü–∏—è –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω–∏–º–∫–∞",
                    color_continuous_scale='gray'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                fig = px.imshow(
                    fertility_zones,
                    title="–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è",
                    color_continuous_scale=['red', 'yellow', 'green']
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–Ω
                zone_counts = [np.sum(fertility_zones == i) for i in range(3)]
                zone_names = ['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è']
                
                zones_df = pd.DataFrame({
                    '–ó–æ–Ω–∞': zone_names,
                    '–ü–∏–∫—Å–µ–ª–∏': zone_counts,
                    '–ü—Ä–æ—Ü–µ–Ω—Ç': [count/len(fertility_zones.flatten())*100 for count in zone_counts]
                })
                
                st.dataframe(zones_df, use_container_width=True, hide_index=True)
    
    # –í–∫–ª–∞–¥–∫–∞ 4: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    with tab4:
        st.header("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
        
        # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            x_param = st.selectbox(
                "–ü–∞—Ä–∞–º–µ—Ç—Ä X",
                analyzer.soil_params,
                index=2  # N –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
        
        with col2:
            y_param = st.selectbox(
                "–ü–∞—Ä–∞–º–µ—Ç—Ä Y",
                ['yield'] + analyzer.soil_params,
                index=0  # –£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Å–µ—è–Ω–∏—è
        if x_param in merged_data.columns and y_param in merged_data.columns:
            fig = px.scatter(
                merged_data,
                x=x_param,
                y=y_param,
                size='yield' if y_param != 'yield' else None,
                color='yield',
                title=f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {y_param} –æ—Ç {x_param}',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(height=500)
            st.plotly_chart(fig, use_container_width=True)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—á–≤—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            param_dist = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä",
                analyzer.soil_params,
                key="dist_param"
            )
            
            if param_dist in st.session_state.soil_data.columns:
                fig = px.histogram(
                    st.session_state.soil_data,
                    x=param_dist,
                    nbins=30,
                    title=f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {param_dist}'
                )
                st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Box plot –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            fig = go.Figure()
            
            for param in ['N', 'P', 'K']:
                if param in st.session_state.soil_data.columns:
                    fig.add_trace(go.Box(
                        y=st.session_state.soil_data[param],
                        name=param
                    ))
            
            fig.update_layout(
                title='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤',
                yaxis_title='–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è (–º–≥/–∫–≥)'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    # –í–∫–ª–∞–¥–∫–∞ 5: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
    with tab5:
        st.header("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        if st.button("ü§ñ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
            with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                model, scaler, feature_importance, feature_cols = analyzer.build_prediction_model(
                    st.session_state.soil_data,
                    st.session_state.yield_data
                )
                st.session_state.model = {
                    'model': model,
                    'scaler': scaler,
                    'features': feature_cols,
                    'importance': feature_importance
                }
                st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
        
        if st.session_state.model:
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                
                fig = px.bar(
                    st.session_state.model['importance'],
                    x='importance',
                    y='feature',
                    orientation='h',
                    title='–í–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                st.subheader("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏")
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                input_values = {}
                for feature in st.session_state.model['features'][:5]:  # –¢–æ–ø-5 –≤–∞–∂–Ω—ã—Ö
                    if feature in st.session_state.soil_data.columns:
                        mean_val = st.session_state.soil_data[feature].mean()
                        std_val = st.session_state.soil_data[feature].std()
                        
                        input_values[feature] = st.slider(
                            f"{feature}",
                            float(mean_val - 2*std_val),
                            float(mean_val + 2*std_val),
                            float(mean_val),
                            step=float(std_val/10)
                        )
                
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
                if st.button("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                    input_df = pd.DataFrame([input_values])
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    for feature in st.session_state.model['features']:
                        if feature not in input_df.columns:
                            input_df[feature] = st.session_state.soil_data[feature].mean()
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑
                    input_scaled = st.session_state.model['scaler'].transform(
                        input_df[st.session_state.model['features']]
                    )
                    prediction = st.session_state.model['model'].predict(input_scaled)[0]
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    st.metric(
                        "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å",
                        f"{prediction:.1f} —Ü/–≥–∞",
                        delta=f"{prediction - st.session_state.yield_data['yield'].mean():.1f} –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ"
                    )
                    
                    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    st.info("""
                    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏:**
                    - –£–≤–µ–ª–∏—á—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∑–æ—Ç–∞ –Ω–∞ 10-15%
                    - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ pH –ø–æ—á–≤—ã –¥–æ 6.5-7.0
                    - –û–±–µ—Å–ø–µ—á—å—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
                    """)
    
    # –í–∫–ª–∞–¥–∫–∞ 6: –û—Ç—á–µ—Ç
    with tab6:
        st.header("–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "–°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å",
                f"{st.session_state.yield_data['yield'].mean():.1f} —Ü/–≥–∞"
            )
        
        with col2:
            st.metric(
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å",
                f"{st.session_state.yield_data['yield'].max():.1f} —Ü/–≥–∞"
            )
        
        with col3:
            st.metric(
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å",
                f"{st.session_state.yield_data['yield'].min():.1f} —Ü/–≥–∞"
            )
        
        with col4:
            st.metric(
                "–í–∞—Ä–∏–∞—Ü–∏—è",
                f"{st.session_state.yield_data['yield'].std():.1f} —Ü/–≥–∞"
            )
        
        # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.subheader("–°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø–æ—á–≤—ã")
        
        summary_stats = st.session_state.soil_data[analyzer.soil_params[:8]].describe()
        st.dataframe(summary_stats, use_container_width=True)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
        st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF –æ—Ç—á–µ—Ç"):
                st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")
        
        with col2:
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
            csv = st.session_state.soil_data.to_csv(index=False)
            st.download_button(
                label="üìä –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ CSV",
                data=csv,
                file_name="soil_analysis_report.csv",
                mime="text/csv"
            )
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—è–º
        st.subheader("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –ø–æ–ª—è–º")
        
        if st.session_state.soil_data is not None and st.session_state.yield_data is not None:
            # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
            fields_analysis = []
            for i in range(1, 4):
                field_analysis = analyzer.get_field_analysis(
                    i, 
                    st.session_state.soil_data, 
                    st.session_state.yield_data
                )
                if field_analysis:
                    fields_analysis.append(field_analysis)
            
            if fields_analysis:
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ–π
                analysis_df = pd.DataFrame([
                    {
                        '–ü–æ–ª–µ': f"–ü–æ–ª–µ {analysis['field_id']}",
                        '–£—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å (—Ü/–≥–∞)': analysis['yield'],
                        '–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': len([p for p in analysis['soil_parameters'].values() if p['status'] != 'optimal']),
                        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': len(analysis['recommendations'])
                    }
                    for analysis in fields_analysis
                ])
                
                st.dataframe(analysis_df, use_container_width=True, hide_index=True)
        
        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è –≤—ã–≤–æ–¥–æ–≤
        if st.session_state.soil_data is not None and st.session_state.yield_data is not None:
            correlations, merged_data = analyzer.analyze_correlations(
                st.session_state.soil_data,
                st.session_state.yield_data
            )
            
            # –ù–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            significant_correlations = [
                (param, data['correlation']) 
                for param, data in correlations.items() 
                if data['significant'] and abs(data['correlation']) > 0.3
            ]
            significant_correlations.sort(key=lambda x: abs(x[1]), reverse=True)
            
            st.markdown(f"""
            ### üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:
            
            1. **–ù–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏:**
               {chr(10).join([f"               - {param}: –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {corr:.3f}" for param, corr in significant_correlations[:3]])}
            
            2. **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—è–º:**
               - –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {st.session_state.yield_data['yield'].mean():.1f} —Ü/–≥–∞
               - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {st.session_state.yield_data['yield'].max():.1f} —Ü/–≥–∞
               - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: {st.session_state.yield_data['yield'].min():.1f} —Ü/–≥–∞
               - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {(st.session_state.yield_data['yield'].std() / st.session_state.yield_data['yield'].mean() * 100):.1f}%
            
            3. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**
               - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
               - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–∏—Å–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–æ—á–≤—ã
               - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
               - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ—Ä–º —É–¥–æ–±—Ä–µ–Ω–∏–π
            
            ### üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏:
            
            –ü—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—á–≤—ã –≤–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ 
            —Å—Ä–µ–¥–Ω–µ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞ **15-25%**.
            """)
        else:
            st.markdown("""
            ### üîç –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:
            
            1. **–ù–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏:**
               - –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞–∑–æ—Ç–∞ (N) - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.65
               - –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –≤–µ—â–µ—Å—Ç–≤–æ - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.58
               - pH –ø–æ—á–≤—ã - –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è 0.42
            
            2. **–ó–æ–Ω—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ–º:**
               - –í—ã—Å–æ–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: 33% –ø–ª–æ—â–∞–¥–∏
               - –°—Ä–µ–¥–Ω—è—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: 50% –ø–ª–æ—â–∞–¥–∏
               - –ù–∏–∑–∫–∞—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å: 17% –ø–ª–æ—â–∞–¥–∏
            
            3. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**
               - –í–Ω–µ—Å–µ–Ω–∏–µ –∞–∑–æ—Ç–Ω—ã—Ö —É–¥–æ–±—Ä–µ–Ω–∏–π –Ω–∞ —É—á–∞—Å—Ç–∫–∞—Ö —Å –Ω–∏–∑–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º N
               - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ pH –Ω–∞ –∫–∏—Å–ª—ã—Ö –ø–æ—á–≤–∞—Ö
               - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞
            
            ### üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏:
            
            –ü—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—á–≤—ã –≤–æ–∑–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ 
            —Å—Ä–µ–¥–Ω–µ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏ –Ω–∞ **15-20%**.
            """)

else:
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    with st.expander("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
        st.markdown("""
        ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
        
        1. **–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–Ω–∏–º–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ GeoTIFF
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ GeoJSON
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å —Ö–∏–º–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º –ø–æ—á–≤
           - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏
        
        2. **–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:**
           - –ò–∑—É—á–∏—Ç–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—á–≤—ã –∏ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é
           - –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        
        3. **–ö–∞—Ä—Ç–∞ –ø–ª–æ–¥–æ—Ä–æ–¥–∏—è:**
           - –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∑–æ–Ω—ã —Å —Ä–∞–∑–ª–∏—á–Ω–æ–π —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å—é –Ω–∞ –∫–∞—Ä—Ç–µ
           - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        
        4. **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ:**
           - –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
           - –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–π—Ç–µ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        5. **–û—Ç—á–µ—Ç:**
           - –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
           - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        """)
    
    # –î–µ–º–æ-—Ä–µ–∂–∏–º
    if st.button("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ-—Ä–µ–∂–∏–º"):
        st.session_state.data_loaded = True
        st.rerun()

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—á–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç–∏<br>
    Agricultural Soil Analysis Dashboard
    </div>
    """,
    unsafe_allow_html=True
)